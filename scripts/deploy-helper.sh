#!/bin/bash

# SAMS Deployment Helper Script
# This script provides a consistent deployment interface until sams-deploy is fixed
# Created: 2025-01-03

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[DEPLOY]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to confirm deployment
confirm_deployment() {
    echo ""
    print_warning "You are about to deploy $1 to PRODUCTION"
    echo -n "Are you sure? (y/N): "
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        print_error "Deployment cancelled"
        exit 1
    fi
}

# Function to run pre-deployment checks
pre_deploy_checks() {
    print_status "Running pre-deployment checks..."
    
    # Check if we're on main branch
    current_branch=$(git branch --show-current)
    if [ "$current_branch" != "main" ]; then
        print_warning "Not on main branch (current: $current_branch)"
        echo -n "Continue anyway? (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Check for uncommitted changes
    if [[ -n $(git status -s) ]]; then
        print_warning "You have uncommitted changes"
        git status -s
        echo -n "Continue anyway? (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Function to deploy desktop frontend
deploy_desktop() {
    print_status "Deploying Desktop Frontend..."
    cd frontend/sams-ui
    
    print_status "Installing dependencies..."
    npm install
    
    print_status "Building project..."
    npm run build
    
    print_status "Deploying to Vercel..."
    vercel --prod
    
    print_status "Desktop deployment complete!"
    echo ""
    print_status "Please verify at: https://sams.sandyland.com.mx"
}

# Function to deploy mobile frontend
deploy_mobile() {
    print_status "Deploying Mobile Frontend..."
    cd frontend/mobile-app
    
    print_status "Installing dependencies..."
    npm install
    
    print_status "Building project..."
    npm run build
    
    print_status "Deploying to Vercel..."
    vercel --prod
    
    print_status "Mobile deployment complete!"
    echo ""
    print_status "Please verify at: https://mobile.sams.sandyland.com.mx"
}

# Function to deploy backend
deploy_backend() {
    print_status "Deploying Backend..."
    cd backend
    
    print_status "Installing dependencies..."
    npm install
    
    print_status "Deploying to Firebase..."
    npm run deploy
    
    print_status "Backend deployment complete!"
    echo ""
    print_status "Please check Firebase console for function status"
}

# Function to create deployment log
create_deployment_log() {
    component=$1
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    log_file="deployment_log_${component}_$(date '+%Y%m%d_%H%M%S').md"
    
    cat > "$log_file" << EOF
# Deployment Log

**Date**: $timestamp  
**Component**: $component  
**Branch**: $(git branch --show-current)  
**Commit**: $(git rev-parse --short HEAD)  

## Deployment Details
- Method: Manual deployment (per DEPLOYMENT_STATUS_JANUARY_2025.md)
- Command used: deploy-helper.sh $component
- Status: SUCCESS

## Verification Checklist
- [ ] Application loads correctly
- [ ] Login functionality works
- [ ] API connections successful
- [ ] No console errors
- [ ] Core features tested

## Notes
Add any deployment notes here...

---
Generated by deploy-helper.sh
EOF

    print_status "Deployment log created: $log_file"
}

# Main script
echo "======================================"
echo "SAMS Deployment Helper"
echo "======================================"
echo ""

# Check command line arguments
if [ $# -eq 0 ]; then
    echo "Usage: $0 [desktop|mobile|backend|all]"
    echo ""
    echo "Components:"
    echo "  desktop - Deploy desktop frontend to Vercel"
    echo "  mobile  - Deploy mobile frontend to Vercel"
    echo "  backend - Deploy backend to Firebase"
    echo "  all     - Deploy all components"
    echo ""
    echo "Example: $0 desktop"
    exit 1
fi

# Store current directory
ORIGINAL_DIR=$(pwd)

# Ensure we're in the project root
if [ ! -f "CLAUDE.md" ]; then
    print_error "This script must be run from the SAMS project root directory"
    exit 1
fi

# Run pre-deployment checks
pre_deploy_checks

# Handle deployment based on argument
case $1 in
    desktop)
        confirm_deployment "Desktop Frontend"
        deploy_desktop
        cd "$ORIGINAL_DIR"
        create_deployment_log "desktop"
        ;;
    mobile)
        confirm_deployment "Mobile Frontend"
        deploy_mobile
        cd "$ORIGINAL_DIR"
        create_deployment_log "mobile"
        ;;
    backend)
        confirm_deployment "Backend"
        deploy_backend
        cd "$ORIGINAL_DIR"
        create_deployment_log "backend"
        ;;
    all)
        confirm_deployment "ALL COMPONENTS"
        deploy_desktop
        cd "$ORIGINAL_DIR"
        deploy_mobile
        cd "$ORIGINAL_DIR"
        deploy_backend
        cd "$ORIGINAL_DIR"
        create_deployment_log "all"
        ;;
    *)
        print_error "Unknown component: $1"
        echo "Valid components: desktop, mobile, backend, all"
        exit 1
        ;;
esac

echo ""
print_status "Deployment process complete!"
print_warning "Remember to verify the deployment and update the deployment log"
echo ""
echo "======================================"
echo "IMPORTANT REMINDERS:"
echo "1. Test the deployed application"
echo "2. Monitor for errors"
echo "3. Update the deployment log with verification results"
echo "4. Notify team of deployment status"
echo "======================================" 