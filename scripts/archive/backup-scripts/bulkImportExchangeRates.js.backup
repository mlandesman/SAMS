/**
 * One-time bulk import script for historical exchange rates
 * 
 * This script will:
 * 1. Delete all existing exchange rate documents
 * 2. Fetch and store exchange rates from January 1, 2024 to today
 * 3. Only process weekdays (skip weekends)
 * 4. Handle API rate limits with delays
 * 
 * Run this scriasync function bulkImportHistoricalRates(options = {}) {
  try {
    const {
      fullReplacement = false,
      fillGaps =async function quickUpdateRates() {
  try {
    console.log('‚ö° Starting quick exchange rates update...');
    
    // Initialize Firebase (dynamic import)
    await importFirebase();
    await initializeFirebase();
    const db = await getDb();
      startDate = new Date('2024-01-01'),
      endDate = new Date()
    } = options;
/**
 * One-time bulk import script for historical exchange rates
 * 
 * This script will:
 * 1. Delete all existing exchange rate documents
 * 2. Fetch and store exchange rates from January 1, 2024 to today
 * 3. Only process weekdays (skip weekends)
 * 4. Handle API rate limits with delays
 * 
 * Run this script once to populate historical data with all currencies
 */

// Firebase functions - will be imported dynamically when needed
let firebaseModule = null;

// Dynamic import for Firebase (only when needed)
async function importFirebase() {
  if (!firebaseModule) {
    firebaseModule = await import('../backend/firebase.js');
  }
  return firebaseModule;
}

const BANXICO_TOKEN = 'b35811246f926df8e12186dbd0c274c800d715a4b2ec970ab053a395f0958edd';

// Banxico series IDs
const BANXICO_SERIES = {
  USD: 'SF43718', // USD to MXN
  CAD: 'SF60632', // CAD to MXN  
  EUR: 'SF46410'  // EUR to MXN
};

/**
 * Generate array of weekday dates between start and end
 */
function getWeekdaysBetween(startDate, endDate) {
  const dates = [];
  const current = new Date(startDate);
  
  while (current <= endDate) {
    const dayOfWeek = current.getDay();
    // Only include weekdays (Monday = 1, Friday = 5)
    if (dayOfWeek >= 1 && dayOfWeek <= 5) {
      dates.push(new Date(current));
    }
    current.setDate(current.getDate() + 1);
  }
  
  return dates;
}

/**
 * Format date for Firestore document ID (YYYY-MM-DD)
 */
function formatDateForStorage(date) {
  if (!date) return null;
  return date.toISOString().split('T')[0];
}

/**
 * Format date for Banxico API (dd/MM/yyyy)
 */
function formatDateForBanxico(date) {
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}

/**
 * Convert Banxico date format (dd/MM/yyyy) to storage format (yyyy-MM-dd)
 */
function convertBanxicoDateToStorage(banxicoDate) {
  const [day, month, year] = banxicoDate.split('/');
  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
}

/**
 * Check if a date is within our desired range (2020-01-01 onwards)
 */
function isDateInRange(dateStr, minDate = '2020-01-01') {
  return dateStr >= minDate;
}

/**
 * Fetch historical rates from Banxico for a specific date
 */
async function fetchBanxicoHistoricalRates(date) {
  const series = Object.values(BANXICO_SERIES);
  const dateStr = formatDateForBanxico(date);
  const url = `https://www.banxico.org.mx/SieAPIRest/service/v1/series/${series.join(',')}/datos/${dateStr}/${dateStr}?mediaType=json&token=${BANXICO_TOKEN}`;
  
  console.log(`üåê Fetching Banxico rates for ${dateStr}...`);
  
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'SAMS-Historical-Import/1.0'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Banxico API error: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data.bmx || !data.bmx.series) {
      console.log(`‚ö†Ô∏è No data available for ${dateStr}`);
      return null;
    }
    
    const rates = {};
    data.bmx.series.forEach(s => {
      if (s.datos && s.datos.length > 0 && s.datos[0].dato !== 'N/E') {
        rates[s.idSerie] = {
          title: s.titulo,
          rate: parseFloat(s.datos[0].dato),
          date: s.datos[0].fecha
        };
      }
    });
    
    return rates;
  } catch (error) {
    console.error(`‚ùå Error fetching Banxico rates for ${dateStr}:`, error.message);
    return null;
  }
}

/**
 * Fetch bulk historical rates from Banxico (all available data)
 * This works better than individual date requests
 */
async function fetchBanxicoBulkHistoricalRates() {
  const series = Object.values(BANXICO_SERIES);
  const url = `https://www.banxico.org.mx/SieAPIRest/service/v1/series/${series.join(',')}/datos?mediaType=json&token=${BANXICO_TOKEN}`;
  
  console.log('üåê Fetching bulk historical rates from Banxico...');
  
  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'SAMS-Historical-Import/1.0'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Banxico API error: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (!data.bmx || !data.bmx.series) {
      throw new Error('No series data available from Banxico');
    }
    
    // Organize data by date and series
    const ratesByDate = {};
    
    data.bmx.series.forEach(series => {
      const seriesId = series.idSerie;
      const seriesTitle = series.titulo;
      
      if (series.datos) {
        series.datos.forEach(dataPoint => {
          if (dataPoint.dato !== 'N/E' && dataPoint.fecha) {
            const date = dataPoint.fecha; // Format: dd/MM/yyyy
            const rate = parseFloat(dataPoint.dato);
            
            if (!ratesByDate[date]) {
              ratesByDate[date] = {};
            }
            
            ratesByDate[date][seriesId] = {
              title: seriesTitle,
              rate: rate,
              date: date
            };
          }
        });
      }
    });
    
    console.log(`‚úÖ Fetched bulk data for ${Object.keys(ratesByDate).length} dates`);
    return ratesByDate;
    
  } catch (error) {
    console.error('‚ùå Error fetching bulk Banxico rates:', error.message);
    throw error;
  }
}

/**
 * Fetch Colombian peso rate for a specific date
 * Note: Colombian API may not have historical data, so we'll use a fallback approach
 */
async function fetchColombianHistoricalRate() {
  try {
    const url = 'https://www.datos.gov.co/resource/ceyp-9c7c.json?$order=vigenciadesde DESC&$limit=1';
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'SAMS-Historical-Import/1.0'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Colombian API error: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    return parseFloat(data[0].valor);
  } catch (error) {
    console.error('‚ùå Error fetching Colombian rate:', error.message);
    // Fallback to approximate rate if API fails
    return 4000; // Approximate USD to COP rate
  }
}

/**
 * Process exchange rates for a single date
 */
async function processDateRates(date, db, copRate) {
  const dateStr = formatDateForStorage(date);
  
  try {
    // Fetch Banxico rates for this date
    const banxicoRates = await fetchBanxicoHistoricalRates(date);
    
    if (!banxicoRates || !banxicoRates[BANXICO_SERIES.USD]) {
      console.log(`‚ö†Ô∏è Skipping ${dateStr} - no USD rate available`);
      return false;
    }
    
    // Calculate MXN to other currencies
    const mxnToUsd = 1 / banxicoRates[BANXICO_SERIES.USD].rate;
    const mxnToCad = banxicoRates[BANXICO_SERIES.CAD] ? 1 / banxicoRates[BANXICO_SERIES.CAD].rate : null;
    const mxnToEur = banxicoRates[BANXICO_SERIES.EUR] ? 1 / banxicoRates[BANXICO_SERIES.EUR].rate : null;
    const mxnToCop = mxnToUsd * copRate;
    
    // Prepare exchange rates document
    const exchangeRates = {
      date: dateStr,
      lastUpdated: new Date(),
      source: 'Historical Import',
      rates: {
        MXN_USD: {
          rate: mxnToUsd,
          source: 'Banxico',
          seriesId: 'SF43718',
          originalRate: banxicoRates[BANXICO_SERIES.USD].rate,
          title: banxicoRates[BANXICO_SERIES.USD].title
        },
        MXN_COP: {
          rate: mxnToCop,
          source: 'Colombian Government (current rate applied)',
          calculatedFrom: 'USD/COP rate via MXN/USD',
          usdToCopRate: copRate
        }
      }
    };
    
    // Add CAD if available
    if (mxnToCad) {
      exchangeRates.rates.MXN_CAD = {
        rate: mxnToCad,
        source: 'Banxico',
        seriesId: 'SF60632',
        originalRate: banxicoRates[BANXICO_SERIES.CAD].rate,
        title: banxicoRates[BANXICO_SERIES.CAD].title
      };
    }
    
    // Add EUR if available
    if (mxnToEur) {
      exchangeRates.rates.MXN_EUR = {
        rate: mxnToEur,
        source: 'Banxico',
        seriesId: 'SF46410',
        originalRate: banxicoRates[BANXICO_SERIES.EUR].rate,
        title: banxicoRates[BANXICO_SERIES.EUR].title
      };
    }
    
    // Store in Firestore
    await db.collection('exchangeRates').doc(dateStr).set(exchangeRates);
    
    console.log(`‚úÖ Stored rates for ${dateStr}: USD=${mxnToUsd.toFixed(6)}, CAD=${mxnToCad?.toFixed(6) || 'N/A'}, EUR=${mxnToEur?.toFixed(6) || 'N/A'}, COP=${mxnToCop.toFixed(2)}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Error processing ${dateStr}:`, error.message);
    return false;
  }
}

/**
 * Delete all existing exchange rate documents
 */
async function deleteExistingRates(db) {
  console.log('üóëÔ∏è Deleting existing exchange rate documents...');
  
  try {
    const collection = db.collection('exchangeRates');
    const snapshot = await collection.get();
    
    const batch = db.batch();
    snapshot.docs.forEach((doc) => {
      batch.delete(doc.ref);
    });
    
    await batch.commit();
    console.log(`‚úÖ Deleted ${snapshot.docs.length} existing exchange rate documents`);
  } catch (error) {
    console.error('‚ùå Error deleting existing rates:', error);
    throw error;
  }
}

/**
 * Get existing exchange rate dates from Firestore
 */
async function getExistingRateDates(db) {
  try {
    const collection = db.collection('exchangeRates');
    const snapshot = await collection.get();
    
    const existingDates = new Set();
    snapshot.docs.forEach((doc) => {
      existingDates.add(doc.id); // Document ID is the date string
    });
    
    console.log(`üìä Found ${existingDates.size} existing exchange rate documents`);
    return existingDates;
  } catch (error) {
    console.error('‚ùå Error fetching existing rates:', error);
    throw error;
  }
}

/**
 * Get missing weekdays that need exchange rates
 */
function getMissingWeekdays(allWeekdays, existingDates) {
  const missing = allWeekdays.filter(date => {
    const dateStr = formatDateForStorage(date);
    return !existingDates.has(dateStr);
  });
  
  console.log(`üìä Found ${missing.length} missing weekdays out of ${allWeekdays.length} total weekdays`);
  return missing;
}

/**
 * Get the latest exchange rate date from Firestore
 */
async function getLatestRateDate(db) {
  try {
    const collection = db.collection('exchangeRates');
    const snapshot = await collection.orderBy('date', 'desc').limit(1).get();
    
    if (snapshot.empty) {
      console.log('üìä No existing exchange rates found');
      return null;
    }
    
    const latestDate = snapshot.docs[0].data().date;
    console.log(`üìä Latest exchange rate date: ${latestDate}`);
    return new Date(latestDate);
  } catch (error) {
    console.error('‚ùå Error fetching latest rate date:', error);
    throw error;
  }
}

/**
 * Process bulk historical rates and store them in Firestore
 * Only stores dates from 2020-01-01 onwards
 */
async function processBulkHistoricalRates(db, bulkRates, copRate, options = {}) {
  const { dryRun = false, minDate = '2020-01-01' } = options;
  
  console.log(`üîÑ Processing bulk historical rates (filtering dates from ${minDate} onwards)...`);
  
  let processed = 0;
  let skipped = 0;
  let failed = 0;
  
  // Convert and filter dates
  const validDates = [];
  for (const banxicoDate of Object.keys(bulkRates)) {
    const storageDate = convertBanxicoDateToStorage(banxicoDate);
    if (isDateInRange(storageDate, minDate)) {
      validDates.push({ banxicoDate, storageDate });
    } else {
      skipped++;
    }
  }
  
  console.log(`üìä Found ${validDates.length} dates in range (${skipped} dates before ${minDate} filtered out)`);
  
  if (dryRun) {
    console.log(`üìã DRY RUN: Would process ${validDates.length} dates from ${minDate} onwards`);
    return { processed: validDates.length, failed: 0, skipped };
  }
  
  // Sort dates chronologically for better logging
  validDates.sort((a, b) => a.storageDate.localeCompare(b.storageDate));
  
  for (let i = 0; i < validDates.length; i++) {
    const { banxicoDate, storageDate } = validDates[i];
    const ratesData = bulkRates[banxicoDate];
    
    try {
      // Check if we have USD rate (required)
      if (!ratesData[BANXICO_SERIES.USD]) {
        console.log(`‚ö†Ô∏è Skipping ${storageDate} - no USD rate available`);
        skipped++;
        continue;
      }
      
      // Calculate MXN to other currencies
      const mxnToUsd = 1 / ratesData[BANXICO_SERIES.USD].rate;
      const mxnToCad = ratesData[BANXICO_SERIES.CAD] ? 1 / ratesData[BANXICO_SERIES.CAD].rate : null;
      const mxnToEur = ratesData[BANXICO_SERIES.EUR] ? 1 / ratesData[BANXICO_SERIES.EUR].rate : null;
      const mxnToCop = mxnToUsd * copRate;
      
      // Prepare exchange rates document
      const exchangeRates = {
        date: storageDate,
        lastUpdated: new Date(),
        source: 'Historical Import (Bulk)',
        rates: {
          MXN_USD: {
            rate: mxnToUsd,
            source: 'Banxico',
            seriesId: 'SF43718',
            originalRate: ratesData[BANXICO_SERIES.USD].rate,
            title: ratesData[BANXICO_SERIES.USD].title
          },
          MXN_COP: {
            rate: mxnToCop,
            source: 'Colombian Government (current rate applied)',
            calculatedFrom: 'USD/COP rate via MXN/USD',
            usdToCopRate: copRate
          }
        }
      };
      
      // Add CAD if available
      if (mxnToCad && ratesData[BANXICO_SERIES.CAD]) {
        exchangeRates.rates.MXN_CAD = {
          rate: mxnToCad,
          source: 'Banxico',
          seriesId: 'SF60632',
          originalRate: ratesData[BANXICO_SERIES.CAD].rate,
          title: ratesData[BANXICO_SERIES.CAD].title
        };
      }
      
      // Add EUR if available
      if (mxnToEur && ratesData[BANXICO_SERIES.EUR]) {
        exchangeRates.rates.MXN_EUR = {
          rate: mxnToEur,
          source: 'Banxico',
          seriesId: 'SF46410',
          originalRate: ratesData[BANXICO_SERIES.EUR].rate,
          title: ratesData[BANXICO_SERIES.EUR].title
        };
      }
      
      // Store in Firestore
      await db.collection('exchangeRates').doc(storageDate).set(exchangeRates);
      
      processed++;
      
      // Progress update every 50 dates
      if (processed % 50 === 0) {
        console.log(`üìä Progress: ${processed} dates processed...`);
      }
      
    } catch (error) {
      console.error(`‚ùå Error processing ${storageDate}:`, error.message);
      failed++;
    }
  }
  
  return { processed, failed, skipped };
}

// ...existing code...
