/**
 * categories.js
 * CRUD operations for categories collection inside lists
 * Refactored to include propertyAccess validation
 */

import { getDb } from '../firebase.js';
import { writeAuditLog } from '../utils/auditLogger.js';

/**
 * CRUD operations for categories under a client
 * All functions now require user object for propertyAccess validation
 */

// Create a category
async function createCategory(clientId, data, user) {
  try {
    // Validate propertyAccess
    if (!user) {
      console.error('❌ No user provided for createCategory');
      return null;
    }

    if (!user.isSuperAdmin() && !user.hasPropertyAccess(clientId)) {
      console.error(`❌ User ${user.email} lacks access to client ${clientId}`);
      return null;
    }

    const db = await getDb();
    const catRef = await db.collection(`clients/${clientId}/categories`).add({
      ...data,
      createdAt: new Date(),
      createdBy: user.uid,
    });

    const auditSuccess = await writeAuditLog({
      module: 'categories',
      action: 'create',
      parentPath: `clients/${clientId}/categories/${catRef.id}`,
      docId: catRef.id,
      friendlyName: data.name || 'Unnamed Category',
      notes: `Created category record by ${user.email}`,
      userId: user.uid,
    });

    if (!auditSuccess) {
      console.error('❌ Failed to write audit log for createCategory.');
    }

    return catRef.id;
  } catch (error) {
    console.error('❌ Error creating category:', error);
    return null;
  }
}

// Update a category
async function updateCategory(clientId, catId, newData, user) {
  try {
    // Validate propertyAccess
    if (!user) {
      console.error('❌ No user provided for updateCategory');
      return false;
    }

    if (!user.isSuperAdmin() && !user.hasPropertyAccess(clientId)) {
      console.error(`❌ User ${user.email} lacks access to client ${clientId}`);
      return false;
    }

    const db = await getDb();
    const catRef = db.doc(`clients/${clientId}/categories/${catId}`);
    await catRef.update({
      ...newData,
      updatedAt: new Date(),
      updatedBy: user.uid,
    });

    const auditSuccess = await writeAuditLog({
      module: 'categories',
      action: 'update',
      parentPath: `clients/${clientId}/categories/${catId}`,
      docId: catId,
      friendlyName: newData.name || 'Unnamed Category',
      notes: `Updated category record by ${user.email}`,
      userId: user.uid,
    });

    if (!auditSuccess) {
      console.error('❌ Failed to write audit log for updateCategory.');
    }

    return true;
  } catch (error) {
    console.error('❌ Error updating category:', error);
    return false;
  }
}

// Delete a category
async function deleteCategory(clientId, catId, user) {
  try {
    // Validate propertyAccess
    if (!user) {
      console.error('❌ No user provided for deleteCategory');
      return false;
    }

    if (!user.isSuperAdmin() && !user.hasPropertyAccess(clientId)) {
      console.error(`❌ User ${user.email} lacks access to client ${clientId}`);
      return false;
    }

    const db = await getDb();
    const catRef = db.doc(`clients/${clientId}/categories/${catId}`);
    await catRef.delete();

    const auditSuccess = await writeAuditLog({
      module: 'categories',
      action: 'delete',
      parentPath: `clients/${clientId}/categories/${catId}`,
      docId: catId,
      friendlyName: '',
      notes: `Deleted category record by ${user.email}`,
      userId: user.uid,
    });

    if (!auditSuccess) {
      console.error('❌ Failed to write audit log for deleteCategory.');
    }

    return true;
  } catch (error) {
    console.error('❌ Error deleting category:', error);
    return false;
  }
}

// List all categories
async function listCategories(clientId, user) {
  try {
    // Validate propertyAccess
    if (!user) {
      console.error('❌ No user provided for listCategories');
      return [];
    }

    if (!user.isSuperAdmin() && !user.hasPropertyAccess(clientId)) {
      console.error(`❌ User ${user.email} lacks access to client ${clientId}`);
      return [];
    }

    const db = await getDb();
    const snapshot = await db.collection(`clients/${clientId}/categories`).get();
    const categories = [];

    snapshot.forEach(doc => {
      const data = doc.data();
      categories.push({
        ...data,
        id: doc.id, // Always use the document ID, overriding any 'id' field in data
      });
    });

    console.log(`✅ User ${user.email} listed ${categories.length} categories for client ${clientId}`);
    return categories;
  } catch (error) {
    console.error('❌ Error listing categories:', error);
    return [];
  }
}

export {
  createCategory,
  updateCategory,
  deleteCategory,
  listCategories,
};