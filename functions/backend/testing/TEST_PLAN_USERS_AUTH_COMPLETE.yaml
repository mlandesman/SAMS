# Comprehensive Test Plan for SAMS Users/Auth Security Verification
# Generated: 2025-07-22
# Total Test Cases: 85 (exceeds minimum 65 requirement)
# Estimated Execution Time: 2-3 hours

# Test Category 1: Authentication Testing (20 test cases)
# Testing all protected endpoints with various authentication scenarios

AUTH-001:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test accessing user profile without any authorization header
  Setup:
    - Ensure backend is running on localhost:5001
    - Do NOT include Authorization header
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body: 
      error: "No valid authorization header"
    Plain English: "User cannot access their profile without logging in"
  Security Impact: Critical - Prevents unauthorized data access

AUTH-002:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test accessing user profile with invalid token format
  Setup:
    - Create malformed token: "NotAValidToken123"
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer NotAValidToken123"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "Invalid token format"
    Plain English: "System rejects tokens that aren't properly formatted Firebase tokens"
  Security Impact: Critical - Prevents token forgery

AUTH-003:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test accessing user profile with expired Firebase token
  Setup:
    - Use an expired Firebase token from test data
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ${EXPIRED_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "Token has expired"
    Plain English: "Old login tokens cannot be reused after expiration"
  Security Impact: High - Prevents session hijacking with old tokens

AUTH-004:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test with token from different Firebase project
  Setup:
    - Use token from a different Firebase project
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ${DIFFERENT_PROJECT_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "Token from invalid project"
    Plain English: "Tokens from other Firebase projects are rejected"
  Security Impact: Critical - Prevents cross-project token abuse

AUTH-005:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test with malformed Bearer header format
  Setup:
    - Use incorrect Bearer header format
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Token ${VALID_TOKEN}"  # Should be "Bearer"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "Invalid authorization format"
    Plain English: "Authorization header must follow Bearer token format"
  Security Impact: Medium - Enforces proper authentication standards

AUTH-006:
  Category: Authentication  
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test with token in wrong header field
  Setup:
    - Put token in custom header instead of Authorization
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      X-Auth-Token: "${VALID_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Token must be in Authorization header, not custom headers"
  Security Impact: Medium - Prevents header confusion attacks

AUTH-007:
  Category: Authentication
  Endpoint: GET /api/user/clients
  Method: GET
  Description: Test accessing user clients without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/user/clients
    Headers:
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Client list requires authentication"
  Security Impact: Critical - Protects client data

AUTH-008:
  Category: Authentication
  Endpoint: POST /api/user/select-client
  Method: POST
  Description: Test selecting client without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/user/select-client
    Headers:
      Content-Type: application/json
    Body:
      clientId: "test-client"
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Cannot switch clients without being logged in"
  Security Impact: Critical - Prevents unauthorized client access

AUTH-009:
  Category: Authentication
  Endpoint: GET /api/admin/users
  Method: GET
  Description: Test accessing admin users list without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Admin endpoints require authentication"
  Security Impact: Critical - Protects user data

AUTH-010:
  Category: Authentication
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test updating user without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Content-Type: application/json
    Body:
      name: "Hacked Name"
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Cannot modify users without authentication"
  Security Impact: Critical - Prevents unauthorized user modifications

AUTH-011:
  Category: Authentication
  Endpoint: GET /api/admin/enable-unit-management
  Method: GET
  Description: Test accessing unit management endpoint without auth
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/admin/enable-unit-management
    Headers:
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "System configuration requires authentication"
  Security Impact: Critical - Protects system configuration

AUTH-012:
  Category: Authentication
  Endpoint: GET /api/admin/users
  Method: GET
  Description: Test with valid token but insufficient permissions
  Setup:
    - Use valid token for regular user (not admin)
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${REGULAR_USER_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 403
    Body:
      error: "Insufficient permissions"
    Plain English: "Regular users cannot access admin functions"
  Security Impact: Critical - Enforces role-based access

AUTH-013:
  Category: Authentication
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test creating user with empty authorization header
  Setup:
    - Include Authorization header but empty value
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: ""
      Content-Type: application/json
    Body:
      email: "test@example.com"
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Empty authorization header is rejected"
  Security Impact: Medium - Prevents empty token bypass

AUTH-014:
  Category: Authentication
  Endpoint: DELETE /api/admin/users/test-user-id
  Method: DELETE
  Description: Test deleting user without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "User deletion requires authentication"
  Security Impact: Critical - Prevents unauthorized deletions

AUTH-015:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test with SQL injection in authorization header
  Setup:
    - Inject SQL in token
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ' OR 1=1--"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "Invalid token format"
    Plain English: "SQL injection attempts in auth headers are blocked"
  Security Impact: High - Prevents injection attacks

AUTH-016:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test with extremely long token (buffer overflow attempt)
  Setup:
    - Create 10KB string as token
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ${VERY_LONG_STRING}"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "Invalid token format"
    Plain English: "Oversized tokens are rejected to prevent overflow attacks"
  Security Impact: Medium - Prevents buffer overflow

AUTH-017:
  Category: Authentication
  Endpoint: POST /api/admin/users/:userId/unit-roles
  Method: POST
  Description: Test unit role assignment without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/unit-roles
    Headers:
      Content-Type: application/json
    Body:
      unitId: "unit-123"
      role: "unitManager"
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Role assignments require authentication"
  Security Impact: Critical - Prevents privilege escalation

AUTH-018:
  Category: Authentication
  Endpoint: GET /api/admin/stats
  Method: GET
  Description: Test accessing statistics without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/admin/stats
    Headers:
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "System statistics require authentication"
  Security Impact: High - Protects system information

AUTH-019:
  Category: Authentication
  Endpoint: GET /api/admin/audit-logs
  Method: GET
  Description: Test accessing audit logs without authorization
  Setup:
    - No Authorization header
  Request:
    URL: http://localhost:5001/api/admin/audit-logs
    Headers:
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No valid authorization header"
    Plain English: "Security audit logs require authentication"
  Security Impact: Critical - Protects security logs

AUTH-020:
  Category: Authentication
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test with Bearer keyword but no token
  Setup:
    - Include Bearer but no token
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer"
      Content-Type: application/json
  Expected Result:
    Status: 401
    Body:
      error: "No token provided"
    Plain English: "Bearer keyword alone is not sufficient"
  Security Impact: Low - Enforces complete auth format

# Test Category 2: Field Validation Testing (25 test cases)
# Testing forbidden fields on all data modification endpoints

FIELD-001:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test creating user with forbidden 'vendor' field
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      name: "Test User"
      vendor: "forbidden-vendor"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "vendor"
          message: "Invalid field 'vendor'. Use 'vendorId' instead"
    Plain English: "Cannot use 'vendor' field name, must use 'vendorId'"
  Security Impact: High - Prevents field name confusion attacks

FIELD-002:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test creating user with forbidden 'category' field
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      category: "test-category"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "category"
          message: "Invalid field 'category'. Use 'categoryId' instead"
    Plain English: "Field 'category' is not allowed in user data"
  Security Impact: High - Maintains data integrity

FIELD-003:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test updating user with forbidden 'account' field
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      name: "Updated Name"
      account: "forbidden-account"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "account"
          message: "Invalid field 'account'. Use 'accountId' instead"
    Plain English: "Cannot use 'account' when updating users"
  Security Impact: High - Prevents legacy field usage

FIELD-004:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test updating user with multiple forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      vendor: "test-vendor"
      category: "test-category"
      unit: "test-unit"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "vendor"
          message: "Invalid field 'vendor'. Use 'vendorId' instead"
        - field: "category"
          message: "Invalid field 'category'. Use 'categoryId' instead"
        - field: "unit"
          message: "Invalid field 'unit'. Use 'unitId' instead"
    Plain English: "Multiple forbidden fields are all caught and reported"
  Security Impact: High - Comprehensive field validation

FIELD-005:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with nested forbidden fields in propertyAccess
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      propertyAccess:
        client123:
          vendor: "nested-forbidden"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "propertyAccess.client123.vendor"
          message: "Invalid field 'vendor'. Use 'vendorId' instead"
    Plain English: "Forbidden fields in nested objects are detected"
  Security Impact: High - Deep object validation

FIELD-006:
  Category: Field Validation
  Endpoint: POST /api/user/select-client
  Method: POST
  Description: Test client selection with forbidden 'client' field
  Setup:
    - Use valid user token
  Request:
    URL: http://localhost:5001/api/user/select-client
    Headers:
      Authorization: "Bearer ${USER_TOKEN}"
      Content-Type: application/json
    Body:
      client: "test-client"  # Should be clientId
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "client"
          message: "Invalid field 'client'. Use 'clientId' instead"
    Plain English: "Must use 'clientId' not 'client' when selecting"
  Security Impact: Medium - API consistency

FIELD-007:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with forbidden 'manager' field (user-specific)
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      manager: "John Doe"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid user field names detected"
      code: "FORBIDDEN_USER_FIELDS"
      details:
        - field: "manager"
          message: "Invalid field 'manager'. Use 'managerId' instead"
    Plain English: "Legacy 'manager' field is not allowed"
  Security Impact: High - Prevents legacy structure usage

FIELD-008:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with forbidden fields in array elements
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      permissions:
        - type: "admin"
          unit: "unit-123"  # Forbidden in array
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "permissions.0.unit"
          message: "Invalid field 'unit'. Use 'unitId' instead"
    Plain English: "Forbidden fields in arrays are caught"
  Security Impact: Medium - Array validation

FIELD-009:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test SQL injection attempt in field names
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      "name'; DROP TABLE users; --": "injection"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid request format"
    Plain English: "SQL injection in field names is blocked"
  Security Impact: Critical - Prevents injection attacks

FIELD-010:
  Category: Field Validation
  Endpoint: POST /api/admin/users/:userId/clients
  Method: POST
  Description: Test adding client access with forbidden 'client' field
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/clients
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      client: "client-123"
      role: "viewer"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "client"
          message: "Invalid field 'client'. Use 'clientId' instead"
    Plain English: "Client access requires proper field names"
  Security Impact: Medium - API consistency

FIELD-011:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with extremely long field names
  Setup:
    - Use valid admin token
    - Create field name with 1000 characters
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      "${VERY_LONG_FIELD_NAME}": "value"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field name length"
    Plain English: "Extremely long field names are rejected"
  Security Impact: Low - Prevents resource exhaustion

FIELD-012:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with Unicode characters in forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      "ven😀dor": "test"  # Unicode in field name
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field name format"
    Plain English: "Unicode tricks in field names don't bypass validation"
  Security Impact: Medium - Unicode bypass prevention

FIELD-013:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test case variations of forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      VENDOR: "uppercase"
      Category: "mixed-case"
      UnIt: "weird-case"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
    Plain English: "Field validation is case-sensitive as designed"
  Security Impact: Low - Case sensitivity check

FIELD-014:
  Category: Field Validation
  Endpoint: POST /api/admin/users/:userId/unit-roles
  Method: POST
  Description: Test unit role with forbidden 'unit' field
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/unit-roles
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      unit: "unit-123"  # Should be unitId
      role: "manager"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "unit"
          message: "Invalid field 'unit'. Use 'unitId' instead"
    Plain English: "Unit role assignment requires 'unitId' not 'unit'"
  Security Impact: High - Prevents role confusion

FIELD-015:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test deeply nested forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      data:
        level1:
          level2:
            level3:
              vendor: "deeply-nested"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "data.level1.level2.level3.vendor"
          message: "Invalid field 'vendor'. Use 'vendorId' instead"
    Plain English: "Validation works at any nesting level"
  Security Impact: High - Deep validation

FIELD-016:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with null values in forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      vendor: null
      category: null
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
    Plain English: "Null values don't bypass field validation"
  Security Impact: Medium - Null bypass prevention

FIELD-017:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with empty string in forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      account: ""
      unit: ""
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
    Plain English: "Empty strings don't bypass validation"
  Security Impact: Medium - Empty value bypass prevention

FIELD-018:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with boolean values in forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      vendor: true
      category: false
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
    Plain English: "Boolean values in forbidden fields are caught"
  Security Impact: Low - Type checking

FIELD-019:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with numeric values in forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      vendor: 12345
      account: 67890
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
    Plain English: "Numeric values don't bypass field validation"
  Security Impact: Low - Type validation

FIELD-020:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test field validation with array of forbidden values
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      vendor: ["item1", "item2"]
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
    Plain English: "Arrays in forbidden fields are rejected"
  Security Impact: Low - Array type validation

FIELD-021:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with object values in forbidden fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      category:
        nested: "object"
        data: "here"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
    Plain English: "Objects in forbidden fields are caught"
  Security Impact: Medium - Object validation

FIELD-022:
  Category: Field Validation
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test prototype pollution attempt
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      "__proto__":
        vendor: "prototype-pollution"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field name"
    Plain English: "Prototype pollution attempts are blocked"
  Security Impact: Critical - Prevents prototype pollution

FIELD-023:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with constructor override attempt
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      "constructor":
        vendor: "constructor-override"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field name"
    Plain English: "Constructor override attempts are blocked"
  Security Impact: High - Prevents object manipulation

FIELD-024:
  Category: Field Validation
  Endpoint: POST /api/admin/users/:userId/clients
  Method: POST
  Description: Test mixed valid and invalid fields
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/clients
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      clientId: "valid-client"  # Valid
      role: "viewer"           # Valid
      vendor: "invalid"        # Invalid
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
      code: "FORBIDDEN_FIELDS"
      details:
        - field: "vendor"
          message: "Invalid field 'vendor'. Use 'vendorId' instead"
    Plain English: "Invalid fields are caught even with valid ones present"
  Security Impact: High - Partial validation prevention

FIELD-025:
  Category: Field Validation
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test field validation bypass with JSON strings
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      data: '{"vendor": "hidden-in-string"}'
  Expected Result:
    Status: 200  # String values are not parsed
    Body:
      success: true
    Plain English: "JSON strings are treated as strings, not parsed"
  Security Impact: Low - Expected behavior

# Test Category 3: Legacy Structure Testing (15 test cases)
# Testing old data structures that should be rejected

LEGACY-001:
  Category: Legacy Structure
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test creating user with old role assignment format
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      role: "unitManager"
      unitId: "unit-123"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid user structure"
      message: "Use propertyAccess for role assignments"
    Plain English: "Old role assignment format is rejected"
  Security Impact: High - Prevents legacy role confusion

LEGACY-002:
  Category: Legacy Structure
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test updating with legacy clientAccess structure
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      clientAccess:
        client123: true
        client456: false
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field structure"
      message: "Use propertyAccess instead of clientAccess"
    Plain English: "Legacy clientAccess structure is not allowed"
  Security Impact: High - Enforces new access model

LEGACY-003:
  Category: Legacy Structure
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with old manager assignment format
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      manager: "John Doe"
      managerId: "manager-123"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid user field names detected"
      code: "FORBIDDEN_USER_FIELDS"
    Plain English: "Manager field in old format is rejected"
  Security Impact: Medium - Data consistency

LEGACY-004:
  Category: Legacy Structure
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with legacy permissions array
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      permissions: ["read", "write", "admin"]
  Expected Result:
    Status: 400
    Body:
      error: "Invalid permission structure"
      message: "Use role-based permissions"
    Plain English: "Old permission arrays are not supported"
  Security Impact: High - Enforces RBAC

LEGACY-005:
  Category: Legacy Structure
  Endpoint: POST /api/admin/users/:userId/unit-roles
  Method: POST
  Description: Test with legacy unit assignment structure
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/unit-roles
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      unit: "unit-123"  # Legacy field name
      role: "manager"
      permissions: ["all"]  # Legacy permissions
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
    Plain English: "Legacy unit assignment format rejected"
  Security Impact: High - Prevents permission bypass

LEGACY-006:
  Category: Legacy Structure
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with isAdmin boolean (legacy)
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      isAdmin: true
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Use globalRole instead of isAdmin"
    Plain English: "Boolean admin flags are replaced by roles"
  Security Impact: Critical - Prevents privilege escalation

LEGACY-007:
  Category: Legacy Structure
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with legacy tenant field
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      tenant: "tenant-123"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Multi-tenancy uses propertyAccess"
    Plain English: "Old tenant field is not supported"
  Security Impact: Medium - Multi-tenant isolation

LEGACY-008:
  Category: Legacy Structure
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with legacy accessLevel number
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      accessLevel: 5
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Use role-based access control"
    Plain English: "Numeric access levels are deprecated"
  Security Impact: Medium - Access control clarity

LEGACY-009:
  Category: Legacy Structure
  Endpoint: POST /api/user/select-client
  Method: POST
  Description: Test client selection with legacy structure
  Setup:
    - Use valid user token
  Request:
    URL: http://localhost:5001/api/user/select-client
    Headers:
      Authorization: "Bearer ${USER_TOKEN}"
      Content-Type: application/json
    Body:
      client: "client-123"  # Legacy field
      switchContext: true   # Legacy flag
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field names detected"
    Plain English: "Legacy client switching format rejected"
  Security Impact: Low - API consistency

LEGACY-010:
  Category: Legacy Structure
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with legacy department assignment
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      department: "Finance"
      departmentId: "dept-123"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Department assignments use propertyAccess"
    Plain English: "Old department structure not supported"
  Security Impact: Low - Organizational clarity

LEGACY-011:
  Category: Legacy Structure
  Endpoint: POST /api/admin/users/:userId/clients
  Method: POST
  Description: Test adding client with legacy all-access flag
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/clients
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      clientId: "client-123"
      allAccess: true  # Legacy flag
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Use specific role assignments"
    Plain English: "All-access flags are replaced by roles"
  Security Impact: High - Granular access control

LEGACY-012:
  Category: Legacy Structure
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with legacy groups array
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      groups: ["admin", "finance", "hr"]
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Group assignments use propertyAccess"
    Plain English: "Legacy group arrays not supported"
  Security Impact: Medium - Access model consistency

LEGACY-013:
  Category: Legacy Structure
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with legacy active/inactive status
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "test@example.com"
      status: "active"  # Should use isActive boolean
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Use isActive boolean field"
    Plain English: "Status strings replaced by isActive boolean"
  Security Impact: Low - Data consistency

LEGACY-014:
  Category: Legacy Structure
  Endpoint: PUT /api/admin/users/test-user-id
  Method: PUT
  Description: Test with legacy lastSeen timestamp
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user-id
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      lastSeen: "2024-01-01T00:00:00Z"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Use lastLogin field"
    Plain English: "lastSeen replaced by lastLogin"
  Security Impact: Low - Field naming consistency

LEGACY-015:
  Category: Legacy Structure
  Endpoint: POST /api/admin/users/:userId/unit-roles
  Method: POST
  Description: Test with legacy super-user flag
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/unit-roles
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      unitId: "unit-123"
      role: "manager"
      isSuperUser: true  # Legacy flag
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field"
      message: "Use globalRole for super admin"
    Plain English: "Super user flags replaced by globalRole"
  Security Impact: Critical - Privilege control

# Test Category 4: Error Response Testing (12 test cases)
# Verifying error messages are secure and helpful

ERROR-001:
  Category: Error Response
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Verify error doesn't leak system internals
  Setup:
    - Cause database connection error
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ${VALID_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 500
    Body:
      error: "Internal server error"
      code: "INTERNAL_ERROR"
    Plain English: "Database errors don't expose connection strings"
  Security Impact: High - Prevents information leakage

ERROR-002:
  Category: Error Response
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test duplicate email error message
  Setup:
    - Create user first
    - Try to create again with same email
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "existing@example.com"
  Expected Result:
    Status: 409
    Body:
      error: "User already exists"
      code: "USER_EXISTS"
    Plain English: "Duplicate users show clear error"
  Security Impact: Low - User enumeration risk accepted

ERROR-003:
  Category: Error Response
  Endpoint: PUT /api/admin/users/nonexistent-user
  Method: PUT
  Description: Test error for non-existent user update
  Setup:
    - Use valid admin token
  Request:
    URL: http://localhost:5001/api/admin/users/nonexistent-user
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      name: "Updated Name"
  Expected Result:
    Status: 404
    Body:
      error: "User not found"
      code: "USER_NOT_FOUND"
    Plain English: "Missing users return 404 not 500"
  Security Impact: Low - Proper status codes

ERROR-004:
  Category: Error Response
  Endpoint: POST /api/user/select-client
  Method: POST
  Description: Test error selecting unauthorized client
  Setup:
    - Use token for user without access to client
  Request:
    URL: http://localhost:5001/api/user/select-client
    Headers:
      Authorization: "Bearer ${LIMITED_USER_TOKEN}"
      Content-Type: application/json
    Body:
      clientId: "forbidden-client"
  Expected Result:
    Status: 403
    Body:
      error: "Access denied to this client"
      code: "CLIENT_ACCESS_DENIED"
    Plain English: "Unauthorized client access is clearly denied"
  Security Impact: High - Access control enforcement

ERROR-005:
  Category: Error Response
  Endpoint: DELETE /api/admin/users/test-user
  Method: DELETE
  Description: Test error deleting user as non-SuperAdmin
  Setup:
    - Use regular admin token (not SuperAdmin)
  Request:
    URL: http://localhost:5001/api/admin/users/test-user
    Headers:
      Authorization: "Bearer ${REGULAR_ADMIN_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 403
    Body:
      error: "Insufficient permissions"
      code: "PERMISSION_DENIED"
    Plain English: "Only SuperAdmin can delete users"
  Security Impact: Critical - Role hierarchy enforcement

ERROR-006:
  Category: Error Response
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test malformed JSON error response
  Setup:
    - Send invalid JSON
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body: "{invalid json"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid JSON format"
      code: "INVALID_JSON"
    Plain English: "Malformed requests get clear error"
  Security Impact: Low - Input validation

ERROR-007:
  Category: Error Response
  Endpoint: GET /api/admin/users
  Method: GET
  Description: Test rate limit error message
  Setup:
    - Exceed rate limit
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 429
    Body:
      error: "Too many requests"
      code: "RATE_LIMITED"
      retryAfter: 60
    Plain English: "Rate limits have clear retry guidance"
  Security Impact: Medium - DoS prevention

ERROR-008:
  Category: Error Response
  Endpoint: PUT /api/admin/users/test-user
  Method: PUT
  Description: Test concurrent update conflict error
  Setup:
    - Simulate concurrent update
  Request:
    URL: http://localhost:5001/api/admin/users/test-user
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      name: "Conflicting Update"
  Expected Result:
    Status: 409
    Body:
      error: "Update conflict"
      code: "UPDATE_CONFLICT"
    Plain English: "Concurrent updates handled gracefully"
  Security Impact: Low - Data integrity

ERROR-009:
  Category: Error Response
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test missing required field error
  Setup:
    - Omit email field
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      name: "No Email User"
  Expected Result:
    Status: 400
    Body:
      error: "Missing required field: email"
      code: "MISSING_FIELD"
      field: "email"
    Plain English: "Missing fields are specifically identified"
  Security Impact: Low - Developer friendly

ERROR-010:
  Category: Error Response
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test timeout error message
  Setup:
    - Simulate request timeout
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ${VALID_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 504
    Body:
      error: "Request timeout"
      code: "TIMEOUT"
    Plain English: "Timeouts don't expose backend details"
  Security Impact: Medium - No infrastructure leakage

ERROR-011:
  Category: Error Response
  Endpoint: POST /api/admin/users/:userId/clients
  Method: POST
  Description: Test invalid role error message
  Setup:
    - Use invalid role name
  Request:
    URL: http://localhost:5001/api/admin/users/test-user/clients
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      clientId: "client-123"
      role: "superadmin"  # Invalid for client-level
  Expected Result:
    Status: 400
    Body:
      error: "Invalid role for client access"
      code: "INVALID_ROLE"
      validRoles: ["viewer", "editor", "admin"]
    Plain English: "Invalid roles show valid options"
  Security Impact: Low - Helpful validation

ERROR-012:
  Category: Error Response
  Endpoint: PUT /api/admin/users/test-user
  Method: PUT
  Description: Test field type mismatch error
  Setup:
    - Send wrong type for field
  Request:
    URL: http://localhost:5001/api/admin/users/test-user
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      isActive: "yes"  # Should be boolean
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field type"
      code: "TYPE_ERROR"
      field: "isActive"
      expected: "boolean"
      received: "string"
    Plain English: "Type errors are clearly explained"
  Security Impact: Low - Input validation

# Test Category 5: Edge Cases & Attack Vectors (13 test cases)
# Testing boundary conditions and attack scenarios

EDGE-001:
  Category: Edge Cases
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with extremely large payload (10MB)
  Setup:
    - Create 10MB JSON payload
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body: "${LARGE_PAYLOAD}"
  Expected Result:
    Status: 413
    Body:
      error: "Payload too large"
      code: "PAYLOAD_TOO_LARGE"
      maxSize: "1MB"
    Plain English: "Oversized requests are rejected"
  Security Impact: High - DoS prevention

EDGE-002:
  Category: Edge Cases
  Endpoint: PUT /api/admin/users/test${UNICODE}user
  Method: PUT
  Description: Test Unicode in URL parameters
  Setup:
    - Include Unicode in user ID
  Request:
    URL: http://localhost:5001/api/admin/users/test😀user
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      name: "Test"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid user ID format"
      code: "INVALID_PARAMETER"
    Plain English: "Unicode in IDs is rejected"
  Security Impact: Medium - Parameter validation

EDGE-003:
  Category: Edge Cases
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with null body
  Setup:
    - Send null as body
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body: null
  Expected Result:
    Status: 400
    Body:
      error: "Request body required"
      code: "EMPTY_BODY"
    Plain English: "Null bodies are handled gracefully"
  Security Impact: Low - Input validation

EDGE-004:
  Category: Edge Cases
  Endpoint: PUT /api/admin/users/test-user
  Method: PUT
  Description: Test with undefined values
  Setup:
    - Include undefined in JSON
  Request:
    URL: http://localhost:5001/api/admin/users/test-user
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      name: undefined
      email: undefined
  Expected Result:
    Status: 400
    Body:
      error: "Invalid field values"
      code: "INVALID_VALUES"
    Plain English: "Undefined values are rejected"
  Security Impact: Low - Data integrity

EDGE-005:
  Category: Edge Cases
  Endpoint: POST /api/user/select-client
  Method: POST
  Description: Test with empty object body
  Setup:
    - Send empty object
  Request:
    URL: http://localhost:5001/api/user/select-client
    Headers:
      Authorization: "Bearer ${USER_TOKEN}"
      Content-Type: application/json
    Body: {}
  Expected Result:
    Status: 400
    Body:
      error: "Missing required field: clientId"
      code: "MISSING_FIELD"
    Plain English: "Empty requests need required fields"
  Security Impact: Low - Validation

EDGE-006:
  Category: Edge Cases
  Endpoint: DELETE /api/admin/users/${LONG_ID}
  Method: DELETE
  Description: Test with 1000-character user ID
  Setup:
    - Create very long ID
  Request:
    URL: http://localhost:5001/api/admin/users/${VERY_LONG_ID}
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
  Expected Result:
    Status: 414
    Body:
      error: "URI too long"
      code: "URI_TOO_LONG"
    Plain English: "Extremely long URLs are rejected"
  Security Impact: Medium - Resource exhaustion

EDGE-007:
  Category: Edge Cases
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test header injection attempt
  Setup:
    - Try to inject headers
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ${VALID_TOKEN}\r\nX-Injected: true"
      Content-Type: application/json
  Expected Result:
    Status: 400
    Body:
      error: "Invalid header format"
      code: "HEADER_INJECTION"
    Plain English: "Header injection attempts blocked"
  Security Impact: High - Injection prevention

EDGE-008:
  Category: Edge Cases
  Endpoint: PUT /api/admin/users/../../../etc/passwd
  Method: PUT
  Description: Test path traversal attempt
  Setup:
    - Try directory traversal
  Request:
    URL: http://localhost:5001/api/admin/users/../../../etc/passwd
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      name: "Test"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid user ID format"
      code: "INVALID_PARAMETER"
    Plain English: "Path traversal attempts blocked"
  Security Impact: Critical - File system protection

EDGE-009:
  Category: Edge Cases
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test timing attack on user enumeration
  Setup:
    - Measure response times
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body:
      email: "${TEST_EMAIL}"
  Expected Result:
    Status: 409 or 201
    Timing: "Consistent regardless of existence"
    Plain English: "Response times don't reveal user existence"
  Security Impact: Medium - Timing attack prevention

EDGE-010:
  Category: Edge Cases
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test with circular reference in JSON
  Setup:
    - Create circular reference
  Request:
    URL: http://localhost:5001/api/admin/users
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/json
    Body: "${CIRCULAR_JSON}"
  Expected Result:
    Status: 400
    Body:
      error: "Invalid JSON structure"
      code: "CIRCULAR_REFERENCE"
    Plain English: "Circular references are detected"
  Security Impact: Medium - DoS prevention

EDGE-011:
  Category: Edge Cases
  Endpoint: GET /api/user/profile
  Method: GET
  Description: Test with multiple authorization headers
  Setup:
    - Send duplicate headers
  Request:
    URL: http://localhost:5001/api/user/profile
    Headers:
      Authorization: "Bearer ${TOKEN1}, Bearer ${TOKEN2}"
      Content-Type: application/json
  Expected Result:
    Status: 400
    Body:
      error: "Multiple authorization headers"
      code: "DUPLICATE_HEADER"
    Plain English: "Duplicate auth headers rejected"
  Security Impact: Medium - Auth confusion prevention

EDGE-012:
  Category: Edge Cases
  Endpoint: PUT /api/admin/users/test-user
  Method: PUT
  Description: Test with mixed content types
  Setup:
    - Send form data to JSON endpoint
  Request:
    URL: http://localhost:5001/api/admin/users/test-user
    Headers:
      Authorization: "Bearer ${ADMIN_TOKEN}"
      Content-Type: application/x-www-form-urlencoded
    Body: "name=Test&vendor=forbidden"
  Expected Result:
    Status: 415
    Body:
      error: "Unsupported media type"
      code: "INVALID_CONTENT_TYPE"
      expected: "application/json"
    Plain English: "Wrong content types are rejected"
  Security Impact: Low - Content validation

EDGE-013:
  Category: Edge Cases
  Endpoint: POST /api/admin/users
  Method: POST
  Description: Test CORS preflight security
  Setup:
    - Send OPTIONS request
  Request:
    URL: http://localhost:5001/api/admin/users
    Method: OPTIONS
    Headers:
      Origin: "http://evil.com"
      Access-Control-Request-Method: POST
  Expected Result:
    Status: 403
    Headers:
      Access-Control-Allow-Origin: "null"
    Plain English: "CORS restricts unauthorized origins"
  Security Impact: High - Cross-origin protection

# Test Execution Metadata
metadata:
  totalTests: 85
  categories:
    authentication: 20
    fieldValidation: 25
    legacyStructures: 15
    errorResponses: 12
    edgeCases: 13
  estimatedDuration: "2-3 hours"
  coverageGoals:
    - "All endpoints tested for authentication"
    - "All forbidden fields validated"
    - "Legacy structures comprehensively rejected"
    - "Error messages verified for security"
    - "Common attack vectors covered"
  testEnvironment:
    backend: "http://localhost:5001"
    requiredTokens:
      - VALID_TOKEN
      - EXPIRED_TOKEN
      - DIFFERENT_PROJECT_TOKEN
      - ADMIN_TOKEN
      - REGULAR_USER_TOKEN
      - LIMITED_USER_TOKEN
      - REGULAR_ADMIN_TOKEN